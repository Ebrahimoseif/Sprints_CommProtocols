
commProtocols.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ab  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  0000150f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000581  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000812  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  00002cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 
	
		 
		 
	
	USART_Init();
  92:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_Init>
	USART_Transmit('k');
  96:	8b e6       	ldi	r24, 0x6B	; 107
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_Transmit>
	PORTC_DIR = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	PORTC_DATA = 0 ; 
  a2:	15 ba       	out	0x15, r1	; 21
	
	
	uint16_t data;
	
	 PORTC_DIR = 0xff;
  a4:	84 bb       	out	0x14, r24	; 20
	 PORTC_DATA = 0;
  a6:	15 ba       	out	0x15, r1	; 21
	 PORTB_DIR = (1<<4)|(1<<5)|(1<<7);
  a8:	80 eb       	ldi	r24, 0xB0	; 176
  aa:	87 bb       	out	0x17, r24	; 23
	 

	SPI_Init();
  ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <SPI_Init>
	uint8_t DATA = 170 ;
	SPI_Send_And_receive(DATA);
  b0:	8a ea       	ldi	r24, 0xAA	; 170
  b2:	0e 94 a6 00 	call	0x14c	; 0x14c <SPI_Send_And_receive>
	PORTC_DATA = 32;
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	85 bb       	out	0x15, r24	; 21
	 PORTC_DATA = 0;
	 PORTB_DIR = (1<<4)|(1<<5)|(1<<7);
	 

	SPI_Init();
	uint8_t DATA = 170 ;
  ba:	ca ea       	ldi	r28, 0xAA	; 170
	SPI_Send_And_receive(DATA);
	PORTC_DATA = 32;
    while (1) 
    {	
		DATA++;
  bc:	cf 5f       	subi	r28, 0xFF	; 255
		if(SPI_Send_And_receive(DATA)){
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 a6 00 	call	0x14c	; 0x14c <SPI_Send_And_receive>
  c4:	88 23       	and	r24, r24
  c6:	d1 f3       	breq	.-12     	; 0xbc <main+0x2a>
			USART_Transmit('k');
  c8:	8b e6       	ldi	r24, 0x6B	; 107
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_Transmit>
			PORTC_DATA = DATA;
  d0:	c5 bb       	out	0x15, r28	; 21
  d2:	f4 cf       	rjmp	.-24     	; 0xbc <main+0x2a>

000000d4 <SPI_Init>:
}


  void SPI_callBackFunc_Assign(void (*PtrToSPI_Isr) (void))
 {
 	SPI_ISR = PtrToSPI_Isr;
  d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <SPI_Config+0x6>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	11 f4       	brne	.+4      	; 0xe0 <SPI_Init+0xc>
  dc:	6d 9a       	sbi	0x0d, 5	; 13
  de:	03 c0       	rjmp	.+6      	; 0xe6 <SPI_Init+0x12>
  e0:	81 11       	cpse	r24, r1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SPI_Init+0x12>
  e4:	6d 98       	cbi	0x0d, 5	; 13
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SPI_Config>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	11 f4       	brne	.+4      	; 0xf2 <SPI_Init+0x1e>
  ee:	6c 9a       	sbi	0x0d, 4	; 13
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <SPI_Init+0x24>
  f2:	81 11       	cpse	r24, r1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <SPI_Init+0x24>
  f6:	6c 98       	cbi	0x0d, 4	; 13
  f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SPI_Config+0x4>
  fc:	81 11       	cpse	r24, r1
  fe:	02 c0       	rjmp	.+4      	; 0x104 <SPI_Init+0x30>
 100:	6b 9a       	sbi	0x0d, 3	; 13
 102:	03 c0       	rjmp	.+6      	; 0x10a <SPI_Init+0x36>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	09 f4       	brne	.+2      	; 0x10a <SPI_Init+0x36>
 108:	6b 98       	cbi	0x0d, 3	; 13
 10a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <SPI_Config+0x5>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	11 f4       	brne	.+4      	; 0x116 <SPI_Init+0x42>
 112:	6a 9a       	sbi	0x0d, 2	; 13
 114:	03 c0       	rjmp	.+6      	; 0x11c <SPI_Init+0x48>
 116:	81 11       	cpse	r24, r1
 118:	01 c0       	rjmp	.+2      	; 0x11c <SPI_Init+0x48>
 11a:	6a 98       	cbi	0x0d, 2	; 13
 11c:	9d b1       	in	r25, 0x0d	; 13
 11e:	e0 e6       	ldi	r30, 0x60	; 96
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	89 2b       	or	r24, r25
 126:	8d b9       	out	0x0d, r24	; 13
 128:	83 81       	ldd	r24, Z+3	; 0x03
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	11 f4       	brne	.+4      	; 0x132 <SPI_Init+0x5e>
 12e:	70 9a       	sbi	0x0e, 0	; 14
 130:	03 c0       	rjmp	.+6      	; 0x138 <SPI_Init+0x64>
 132:	81 11       	cpse	r24, r1
 134:	01 c0       	rjmp	.+2      	; 0x138 <SPI_Init+0x64>
 136:	70 98       	cbi	0x0e, 0	; 14
 138:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SPI_Config+0x2>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	11 f4       	brne	.+4      	; 0x144 <SPI_Init+0x70>
 140:	6e 9a       	sbi	0x0d, 6	; 13
 142:	08 95       	ret
 144:	81 11       	cpse	r24, r1
 146:	01 c0       	rjmp	.+2      	; 0x14a <SPI_Init+0x76>
 148:	6e 98       	cbi	0x0d, 6	; 13
 14a:	08 95       	ret

0000014c <SPI_Send_And_receive>:
 14c:	8f b9       	out	0x0f, r24	; 15
 14e:	77 9b       	sbis	0x0e, 7	; 14
 150:	fe cf       	rjmp	.-4      	; 0x14e <SPI_Send_And_receive+0x2>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret

00000156 <__vector_12>:
 }


  ISR(SPI_STC_vect)
  {
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
  	SPI_ISR();
 178:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 17c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 180:	09 95       	icall
  }
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <USART_Init>:
/*********************************/
 void USART_Init() {
	

	ST_USART_Config* Config = &UART_Config;
	UBRRL = 103;
 1a4:	87 e6       	ldi	r24, 0x67	; 103
 1a6:	89 b9       	out	0x09, r24	; 9
	//UBRRH =(unsigned char) (BAUD_RATE >> 8);

//	UBRRL = (unsigned char) BAUD_RATE;
	
	/* USCRA */
	UCSRA |= Config->SPEED_MODE | (UCSRA &= ~ SPEED_MASK);
 1a8:	e7 e6       	ldi	r30, 0x67	; 103
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	21 81       	ldd	r18, Z+1	; 0x01
 1ae:	9b b1       	in	r25, 0x0b	; 11
 1b0:	89 2f       	mov	r24, r25
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	9b b1       	in	r25, 0x0b	; 11
 1b8:	82 2b       	or	r24, r18
 1ba:	89 2b       	or	r24, r25
 1bc:	8b b9       	out	0x0b, r24	; 11
	
	/* USCRB */
	
	UCSRB |= Config->TRANSMIT | (UCSRB &= ~ TRANSMIT_EN_MASK);
 1be:	22 81       	ldd	r18, Z+2	; 0x02
 1c0:	9a b1       	in	r25, 0x0a	; 10
 1c2:	89 2f       	mov	r24, r25
 1c4:	87 7f       	andi	r24, 0xF7	; 247
 1c6:	8a b9       	out	0x0a, r24	; 10
 1c8:	9a b1       	in	r25, 0x0a	; 10
 1ca:	82 2b       	or	r24, r18
 1cc:	89 2b       	or	r24, r25
 1ce:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= Config->RECIEVE	| (UCSRB &= ~ RECIEVE_EN_MASK);
 1d0:	23 81       	ldd	r18, Z+3	; 0x03
 1d2:	9a b1       	in	r25, 0x0a	; 10
 1d4:	89 2f       	mov	r24, r25
 1d6:	8f 7e       	andi	r24, 0xEF	; 239
 1d8:	8a b9       	out	0x0a, r24	; 10
 1da:	9a b1       	in	r25, 0x0a	; 10
 1dc:	82 2b       	or	r24, r18
 1de:	89 2b       	or	r24, r25
 1e0:	8a b9       	out	0x0a, r24	; 10
	
	/* USCRC */
	
	UCSRC |= (URSEL);
 1e2:	80 b5       	in	r24, 0x20	; 32
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	80 bd       	out	0x20, r24	; 32
	
	switch(Config->CHAR_SIZE){
 1e8:	84 81       	ldd	r24, Z+4	; 0x04
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <USART_Init+0x52>
		case USART_9_Bit_CHAR:
			
			UCSRB |= (UCSZ2);			
 1ee:	52 9a       	sbi	0x0a, 2	; 10
		    UCSRC |= (USART_8_Bit_CHAR);
 1f0:	80 b5       	in	r24, 0x20	; 32
 1f2:	83 60       	ori	r24, 0x03	; 3
 1f4:	80 bd       	out	0x20, r24	; 32
		default:
			UCSRC |= Config->CHAR_SIZE;
 1f6:	90 b5       	in	r25, 0x20	; 32
 1f8:	e7 e6       	ldi	r30, 0x67	; 103
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	84 81       	ldd	r24, Z+4	; 0x04
 1fe:	89 2b       	or	r24, r25
 200:	80 bd       	out	0x20, r24	; 32
	}
	
	
	UCSRC |= Config->STOPBIT | (UCSRC &= ~ STOP_BIT_MASK);
 202:	26 81       	ldd	r18, Z+6	; 0x06
 204:	90 b5       	in	r25, 0x20	; 32
 206:	89 2f       	mov	r24, r25
 208:	87 7f       	andi	r24, 0xF7	; 247
 20a:	80 bd       	out	0x20, r24	; 32
 20c:	90 b5       	in	r25, 0x20	; 32
 20e:	82 2b       	or	r24, r18
 210:	89 2b       	or	r24, r25
 212:	80 bd       	out	0x20, r24	; 32
	
	UCSRC |= Config->PARITY_MODE | (UCSRC &= ~ PARITY_MASK);
 214:	25 81       	ldd	r18, Z+5	; 0x05
 216:	90 b5       	in	r25, 0x20	; 32
 218:	89 2f       	mov	r24, r25
 21a:	8f 7c       	andi	r24, 0xCF	; 207
 21c:	80 bd       	out	0x20, r24	; 32
 21e:	90 b5       	in	r25, 0x20	; 32
 220:	82 2b       	or	r24, r18
 222:	89 2b       	or	r24, r25
 224:	80 bd       	out	0x20, r24	; 32
	
	UCSRC |= Config->SYNCH_MODE | (UCSRC &= ~ MODE_MASK);
 226:	20 81       	ld	r18, Z
 228:	90 b5       	in	r25, 0x20	; 32
 22a:	89 2f       	mov	r24, r25
 22c:	8f 7b       	andi	r24, 0xBF	; 191
 22e:	80 bd       	out	0x20, r24	; 32
 230:	90 b5       	in	r25, 0x20	; 32
 232:	82 2b       	or	r24, r18
 234:	89 2b       	or	r24, r25
 236:	80 bd       	out	0x20, r24	; 32
 238:	08 95       	ret

0000023a <USART_Transmit>:


 void USART_Transmit(uint16_t data) {
	/* Wait for empty transmit buffer */
	ST_USART_Config* Config = &UART_Config;
	while (!( UCSRA & (1 << UDRE)))
 23a:	5d 9b       	sbis	0x0b, 5	; 11
 23c:	fe cf       	rjmp	.-4      	; 0x23a <USART_Transmit>
		;
	/***********if the data to be transmitted is 9 bits, write the MSB first*****************/
	if ( Config->CHAR_SIZE  ==	USART_9_Bit_CHAR )
 23e:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <UART_Config+0x4>
 242:	24 30       	cpi	r18, 0x04	; 4
 244:	21 f4       	brne	.+8      	; 0x24e <USART_Transmit+0x14>
	{
		UCSRB |= ((data >> 8) & 1);
 246:	2a b1       	in	r18, 0x0a	; 10
 248:	91 70       	andi	r25, 0x01	; 1
 24a:	92 2b       	or	r25, r18
 24c:	9a b9       	out	0x0a, r25	; 10
	}
		/* Put data into buffer, sends the data */
	UDR = (unsigned char)data;
 24e:	8c b9       	out	0x0c, r24	; 12
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
