/*
 * SPI_Config.h
 *
 * Created: 2020-02-10 10:31:57 PM
 *  Author: EbrahimOseif
 */ 


#ifndef SPI_CONFIG_H_
#define SPI_CONFIG_H_


typedef enum SPI_SLAVE_MODE
{
	SPI_MASTER =1,
	SPI_SLAVE = 0
}EN_SPI_SLAVE_MODE;

typedef enum SPI_PRESCALAR
{
	SPI_Fosc4 = 0b00,
	SPI_Fosc16 = 0b01,
	SPI_Fosc64 = 0b10,
	SPI_Fosc128 = 0b11
}EN_SPI_PRESCALAR;

typedef enum SPI_ENABLE
{
	SPI_ENABLE_ON = 1 ,
	SPI_ENABLE_OFF = 0
}EN_SPI_ENABLE;

typedef enum SPI_DOUBLE_SPEED
{
	SPI_DOUBLE_SPEED_MODE_OFF,
	SPI_DOUBLE_SPEED_MODE_ON
}EN_SPI_DOUBLE_SPEED;

typedef enum SPI_OPERATING_LEVEL
{
	SPI_IDLE_LOW,
	SPI_IDLE_HIGH
}EN_SPI_OPERATING_LEVEL;

typedef enum SPI_SAMPLING_EDGE
{
	SPI_RISING =1 ,
	SPI_FALLING = 0
}EN_SPI_SAMPLING_EDGE;


typedef enum SPI_INT_ENABLE
{
	SPI_INT_OFF,
	SPI_INT_ON
}EN_SPI_INT_ENABLE;

typedef enum SPI_DATA_ORDER
{
	SPI_LSB_FISRT = 1,
	SPI_MSB_FISRT = 0
}EN_SPI_DATA_ORDER;

typedef struct S_SPI_Configuration
{
	EN_SPI_SLAVE_MODE SLAVE_MODE ;
	EN_SPI_PRESCALAR  PRESCALAR ;
	EN_SPI_ENABLE  ENABLE;
	EN_SPI_DOUBLE_SPEED  DOUBLE_SPEED;
	EN_SPI_OPERATING_LEVEL  OPERATING_LEVEL;
	EN_SPI_SAMPLING_EDGE   SAMPLING_EDGE;
	//EN_SPI_INT_ENABLE    INT_ENABLE;
	EN_SPI_DATA_ORDER  DATA_ORDER ;
}ST_SPI_Configuration_t;




#endif /* SPI_CONFIG_H_ */